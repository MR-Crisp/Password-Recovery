from getpass import getpass
import bcrypt
from secrets import *
import sqlite3
from pprint import pprint
from mailer import Mailer


con = sqlite3.connect("userinfo.db")
cur = con.cursor()

#cur.execute("CREATE TABLE TBL_details(id,username,password,email)")

rows = [
        (1, 'aamir', 'qwerty123', 'hzdkv@example.com'),
        (2, 'kaizar', 'pass1', 'asd@example.com'),
        (3, 'ammar', 'something', 'aeh@example.com'),
        (4, 'amin', 'random', 'auwhg@example.com')
]

#cur.executemany("INSERT INTO TBL_details VALUES(?,?,?,?)", rows)
#con.commit()

def user_exist(email):
    """
    Checks if a user with the given email address exists in the database.

    Args:
        email (str): Email address of the user.

    Returns:
        bool: True if a user with the given email address exists in the database, False otherwise.
    """

    user = cur.execute("SELECT * FROM TBL_details WHERE email =?", (email,))
    if user.fetchone() is not None:
        return True
    else:
        return False
    
def code_gen(email):
    """
    Generates a reset code and sends it to the user's email address using the `Mailer` class.

    Args:
        email (str): Email address of the user.

    Returns:
        str: A reset code for the user.
    """
    if user_exist(email) == False:
        print("user not found")
        exit()
    code = token_urlsafe(32)
    mail = Mailer(email='someone@gmail.com', password='your_password') # your gmail username and password go here. Havent filled this in for obvious reasons.
    mail.send(receiver=email, subject='TEST', message="Please reset your password using this code: " + code)


def code_checker(email,code,user_input):#compares the codes to a user inputed code
    """
    Compares a user inputted reset code to the code generated by the `code_gen()` function and if they match, 
    calls the `pass_changer(email)` function to reset the user's password.

    Args:
        email (str): Email address of the user.
        code (str): A reset code for the user.
        user_input (str): The user's input of the reset code.

    Returns:
        bool: True if the user inputted reset code matches the generated code, False otherwise.
    """
    if code != user_input:
        return False
    else:
        return pass_changer(email)
    
def pass_changer(email):
    """
    Prompts the user to input a new password and if it meets the password requirements, 
    hashes and updates the user's password in the database.

    Args:
        email (str): Email address of the user.

    Returns:
        None
    """
    password = getpass("enter your password")
    while not pass_req(password):
        print("you did not meet req")
        password = getpass("enter your password")
    password = str(hash(password))
    cur.execute("UPDATE TBL_details SET password =? WHERE email =?", (password,email))
    con.commit()
    print("password changed")
    
def hash(password):
    """
    Generates a salted hash of the given password using the `bcrypt` library.

    Args:
        password (str): A plain-text password.

    Returns:
        str: A salted hash of the given password.
    """
    salt = bcrypt.gensalt()
    hashed_password = bcrypt.hashpw(password.encode('utf-8'), salt)
    return hashed_password.decode('utf-8')

def pass_req(password):# the password requrements(kept it empty for abstraction reasons)
    return True


def get_det():
    """
    Returns all rows in the "TBL_details" table.

    Args:
        None

    Returns:
        list: A list of tuples, where each tuple represents a row in the "TBL_details" table.
    """
    cur.execute("SELECT * FROM TBL_details")
    return cur.fetchall()

initial = get_det()


em = 'auwhg@example.com'
code = code_gen(em) # currently manually inputing the code will do an email thing later

u_i = code # need to inject the parameter here from the online form U_i stands for user input

code_checker(em,code,u_i)





final = get_det()


pprint(initial)
pprint(final)